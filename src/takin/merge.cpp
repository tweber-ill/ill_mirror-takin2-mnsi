/**
 * Merges the data files generated by genskx
 * @author Tobias Weber <tweber@ill.fr>
 * @date mar-20
 * @license GPLv2 (see 'LICENSE' file)
 */

#include <iostream>
#include <fstream>
#include <string>

#include "tlibs2/libs/file.h"
#include "tlibs2/libs/str.h"


int main()
{
	// --------------------------------------------------------------------
	// modify these for each data file to process
	std::string filename = "skxdyn";
	constexpr std::size_t totaldirs = 101;
	constexpr std::size_t totalfiles = 101;
	constexpr std::size_t expectedidxsize = 808;

	//std::string filename = "helidyn";
	//constexpr std::size_t totaldirs = 100;
	//constexpr std::size_t totalfiles = 100;
	//constexpr std::size_t expectedidxsize = 800;
	// --------------------------------------------------------------------


	std::ofstream ofstrMergedIdx(filename + ".idx");
	std::ofstream ofstrMergedBin(filename + ".bin");

	std::size_t offs = 0;
	for(std::size_t diridx=0; diridx<totaldirs; ++diridx)
	{
		for(std::size_t fileidx=0; fileidx<totalfiles; ++fileidx)
		{
			std::string filename_idx = /*tl2::var_to_str(diridx) + "/" +*/ filename + "_" + tl2::var_to_str(diridx) + "_" + tl2::var_to_str(fileidx) + ".idx";
			std::string filename_bin = /*tl2::var_to_str(diridx) + "/" +*/ filename + "_" + tl2::var_to_str(diridx) + "_" + tl2::var_to_str(fileidx) + ".bin";

			std::cout << "Merging index file \"" << filename_idx << "\"..." << std::endl;


			// correct indices
			std::ifstream ifstrIdx(filename_idx);
			if(!ifstrIdx)
			{
				std::cerr << "Could not open \"" << filename_idx << "\"" << std::endl;
				return -1;
			}

			if(tl2::get_file_size(ifstrIdx) != expectedidxsize)
			{
				std::cerr << "Corrupted data. Dir: " << diridx << ", file: " << fileidx << std::endl;
				return -1;
			}

			// write new indices
			std::size_t sizeWritten=0;
			while(true)
			{
				std::size_t curidx = 0;
				ifstrIdx.read((char*)&curidx, sizeof(curidx));
				if(ifstrIdx.gcount() != sizeof(curidx) || ifstrIdx.eof())
					break;

				curidx += offs;
				ofstrMergedIdx.write((char*)&curidx, sizeof(curidx));

				sizeWritten += sizeof(curidx);
			}
			if(sizeWritten != expectedidxsize)
			{
				std::cerr << "Invalid number of indices written." << std::endl;
				return -1;
			}


			// add offset (sizes of all previous binary files) to indices
			std::ifstream ifstrBin(filename_bin);
			if(!ifstrBin)
			{
				std::cerr << "Could not open \"" << filename_bin << "\"" << std::endl;
				return -1;
			}

			std::size_t sizeBin = tl2::get_file_size(ifstrBin);
			offs += sizeBin;


			std::cout << "Merging binary file \"" << filename_bin << "\"..." << std::endl;
			char* data = new char[sizeBin];
			memset(data, 0, sizeBin);
			ifstrBin.read(data, sizeBin);
			if(ifstrBin.gcount() != (std::streamsize)sizeBin)
			{
				std::cerr << "Could not merge binary file." << std::endl;
				return -1;
			}

			ofstrMergedBin.write(data, sizeBin);
			delete[] data;
		}
	}

	return 0;
}
