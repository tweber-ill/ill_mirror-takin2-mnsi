/**
 * Calculate the ground state fourier components and free energy
 * @author tweber@ill.fr
 * @date aug-18
 * @license GPLv2 (see 'LICENSE' file)
 */

#include "core/skx.h"
#include <fstream>

#define ORDER DEF_SKX_ORDER

using t_real = double;
using t_cplx = std::complex<t_real>;


// initial values
// x and y values are the imaginary components
// z values are the real components
const std::vector<t_real> _allcomps =
{{
	// order 1
	/*0., 0., 10.,
	-5., 0., -5.,*/

	// order 4
	/*0, 0, 10.638285,
	-5.8392782, 0, -5.4227098,
	0.12089063, 0, 0.091292595,
	-0.60718579, 0, -0.62415054,
	0.10321864, 0, 0.083943453,
	0.22050946, 0, 0.19010913,
	0.2190992, 0, 0.19099113,
	-0.011116841, 0, -0.011740137,
	-0.0093003923, 0, -0.0039557086,
	0.0093273084, 0, 0.010642608,
	-0.0078914558, 0, -0.0028256613,*/

	// order 6
	/*0, 0, 10.634562,
	-5.8326696, 0, -5.430272,
	0.11909555, 0, 0.094198481,
	-0.60621163, 0, -0.62680963,
	0.09945007, 0, 0.097686206,
	0.21366494, 0, 0.2020002,
	0.21365584, 0, 0.20195807,
	-0.014657212, 0, -0.01423701,
	-0.0047616111, 0, -0.0036271944,
	0.0077666973, 0, 0.0094190521,
	-0.0048230381, 0, -0.0036992597,
	-0.0010215919, 0, -0.0007992665,
	-0.0061202419, 0, -0.0056528426,
	-0.01028418, 0, -0.0090655584,
	-0.010317291, 0, -0.0090892116,
	-0.0061485945, 0, -0.0056819393,
	0.00052841818, 0, 0.00054131353,
	0.0010331349, 0, 0.00082690631,
	0.00081511897, 0, 0.00057051837,
	0.00060100143, 0, 0.00034822049,
	0.00080777361, 0, 0.0005647798,
	0.0010332427, 0, 0.00082431208,*/

	// order 6, new
	/*0, 0, 10.647757,
	-5.8304987, 0, -5.4277171,
	0.11686088, 0, 0.091717061,
	-0.60991903, 0, -0.62921008,
	0.099226797, 0, 0.097789698,
	0.2133878, 0, 0.20189187,
	0.21338798, 0, 0.20189179,
	-0.014757938, 0, -0.014183651,
	-0.0046508886, 0, -0.0034459968,
	0.0079344632, 0, 0.009789359,
	-0.0046509503, 0, -0.0034461373,
	-0.0011044719, 0, -0.0009040758,
	-0.0062982445, 0, -0.0057473745,
	-0.010386902, 0, -0.0090972931,
	-0.010386959, 0, -0.0090973041,
	-0.0062982473, 0, -0.005747369,
	0.00048681521, 0, 0.00051136154,
	0.00096108135, 0, 0.00078061229,
	0.0007430732, 0, 0.00051103974,
	0.0005286717, 0, 0.00029670532,
	0.0007431174, 0, 0.00051107424,
	0.00096110032, 0, 0.00078063065,*/

	// order 8
	/*0, 0, 10.638316,
	-5.8320235, 0, -5.4295657,
	0.11855499, 0, 0.093494094,
	-0.60754754, 0, -0.62734508,
	0.098777502, 0, 0.097705375,
	0.21357743, 0, 0.20213531,
	0.21357552, 0, 0.20213106,
	-0.014925466, 0, -0.014235675,
	-0.0047648918, 0, -0.0036336754,
	0.0080509486, 0, 0.0095209452,
	-0.0047710577, 0, -0.0036412848,
	-0.00093943165, 0, -0.00099042964,
	-0.0060178406, 0, -0.0060167827,
	-0.0097664982, 0, -0.0097078794,
	-0.0097684108, 0, -0.0097127543,
	-0.006021222, 0, -0.0060215456,
	0.00057839383, 0, 0.00059687257,
	0.00091094805, 0, 0.00093109298,
	0.00065394655, 0, 0.00063099335,
	0.00037647447, 0, 0.00034809709,
	0.0006530733, 0, 0.0006283773,
	0.00091048399, 0, 0.0009298855,
	-8.383803e-05, 0, -7.4635357e-05,
	7.1262628e-05, 0, 7.9723568e-05,
	0.0003774191, 0, 0.00035035634,
	0.00060968318, 0, 0.00055401694,
	0.00061024156, 0, 0.00055387028,
	0.0003778197, 0, 0.00035080693,
	7.1661474e-05, 0, 8.0687058e-05,
	-2.5559635e-05, 0, -2.2305987e-05,
	-6.4148615e-05, 0, -5.5596784e-05,
	-9.2720594e-05, 0, -7.508628e-05,
	-8.8700786e-05, 0, -6.8695235e-05,
	-7.855418e-05, 0, -5.9074914e-05,
	-8.8137649e-05, 0, -6.8259179e-05,
	-9.1478548e-05, 0, -7.3951933e-05,
	-6.3521218e-05, 0, -5.4970986e-05,*/

	// order 8, new
	0, 0, 10.648968,
	-5.8301024, 0, -5.4276768,
	0.11655307, 0, 0.091416664,
	-0.61009976, 0, -0.62956693,
	0.09911573, 0, 0.097910996,
	0.21352657, 0, 0.20200245,
	0.21352625, 0, 0.20200245,
	-0.014830601, 0, -0.014181775,
	-0.0045587763, 0, -0.0034455443,
	0.0083060606, 0, 0.0097824773,
	-0.0045587879, 0, -0.0034455782,
	-0.00097010943, 0, -0.00099183154,
	-0.0060507008, 0, -0.0060022527,
	-0.00982049, 0, -0.0096315756,
	-0.0098205213, 0, -0.0096316908,
	-0.0060507486, 0, -0.0060024244,
	0.00057724942, 0, 0.00059378944,
	0.00092322522, 0, 0.00091359831,
	0.00066281994, 0, 0.00061011072,
	0.00039362644, 0, 0.00033311739,
	0.00066272565, 0, 0.00061004086,
	0.00092319361, 0, 0.00091356379,
	-7.2008731e-05, 0, -6.4081946e-05,
	6.8341002e-05, 0, 7.4339297e-05,
	0.00033842747, 0, 0.00031328061,
	0.0005410163, 0, 0.00049148651,
	0.00054103106, 0, 0.00049151392,
	0.00033847916, 0, 0.00031332389,
	6.8362286e-05, 0, 7.4354956e-05,
	-2.2080566e-05, 0, -1.9566215e-05,
	-5.6105242e-05, 0, -4.8621301e-05,
	-8.0173211e-05, 0, -6.5189096e-05,
	-7.5334286e-05, 0, -5.8610228e-05,
	-6.6282129e-05, 0, -4.9649333e-05,
	-7.5315456e-05, 0, -5.8594238e-05,
	-8.0169609e-05, 0, -6.518442e-05,
	-5.6107056e-05, 0, -4.8622026e-05,

	// order 9
	/*0, 0, 10.643255,
	-5.8312418, 0, -5.4285579,
	0.11772572, 0, 0.092512566,
	-0.60875193, 0, -0.6283387,
	0.099009681, 0, 0.097708898,
	0.21345703, 0, 0.20197682,
	0.21345707, 0, 0.20197861,
	-0.014776251, 0, -0.014232656,
	-0.0046309613, 0, -0.0035734788,
	0.0081490635, 0, 0.0096266455,
	-0.0046284703, 0, -0.003570242,
	-0.00092182745, 0, -0.00095170469,
	-0.0060308055, 0, -0.0059615124,
	-0.0098962887, 0, -0.0095705205,
	-0.009896991, 0, -0.0095664551,
	-0.006029697, 0, -0.0059582546,
	0.00066330707, 0, 0.00055053732,
	0.0010092654, 0, 0.0008918821,
	0.00071552573, 0, 0.00060852518,
	0.00046383518, 0, 0.00034571667,
	0.00071574625, 0, 0.0006113456,
	0.0010099268, 0, 0.00089342825,
	5.3331775e-05, 0, -0.00010249534,
	0.00015539651, 0, 2.5296191e-06,
	0.00030612867, 0, 0.00024823487,
	0.00044277835, 0, 0.00042931965,
	0.00044175346, 0, 0.00042949054,
	0.00030547693, 0, 0.00024768997,
	0.00015489058, 0, 1.3435546e-06,
	6.9271166e-05, 0, 5.7206645e-05,
	-2.7366626e-05, 0, -2.1078224e-05,
	-3.9356e-05, 0, -5.7759202e-05,
	-3.8566738e-05, 0, -4.1978018e-05,
	-2.7839047e-05, 0, -2.8671778e-05,
	-3.9337396e-05, 0, -4.2705009e-05,
	-4.1111101e-05, 0, -5.945824e-05,
	-2.8210339e-05, 0, -2.1934814e-05,
	5.8917296e-05, 0, 3.8878991e-05,
	7.5328415e-05, 0, 5.9727815e-05,
	6.4888601e-05, 0, 3.2477254e-05,
	1.0543302e-05, 0, -5.3633989e-06,
	-1.8523783e-05, 0, -2.8534835e-05,
	-1.8660178e-05, 0, -2.8629368e-05,
	1.0359175e-05, 0, -5.4897177e-06,
	6.4840587e-05, 0, 3.245778e-05,
	7.5336564e-05, 0, 5.9731305e-05,*/

	// order 9, new
	/*0, 0, 10.655505,
	-5.8292186, 0, -5.4262577,
	0.1152635, 0, 0.090135929,
	-0.61150062, 0, -0.63087192,
	0.099203236, 0, 0.098032245,
	0.21327883, 0, 0.20180312,
	0.21327776, 0, 0.20180361,
	-0.014767965, 0, -0.014115593,
	-0.0044220516, 0, -0.0032966533,
	0.0084495825, 0, 0.0099407102,
	-0.0044214223, 0, -0.0032959132,
	-0.00098103817, 0, -0.0010270851,
	-0.0060649696, 0, -0.0060326918,
	-0.0098415616, 0, -0.0096580091,
	-0.0098417253, 0, -0.009657841,
	-0.0060649116, 0, -0.0060326889,
	0.00058388234, 0, 0.00059107187,
	0.00092421856, 0, 0.0009023068,
	0.00063591529, 0, 0.00059419571,
	0.00035661855, 0, 0.00031321088,
	0.00063582872, 0, 0.00059428823,
	0.00092402337, 0, 0.00090219889,
	-6.4303142e-05, 0, -5.3443856e-05,
	6.6461083e-05, 0, 8.9885962e-05,
	0.00031223699, 0, 0.00034976699,
	0.00049669013, 0, 0.00053877709,
	0.00049671166, 0, 0.00053887835,
	0.00031215943, 0, 0.00034982326,
	6.6288573e-05, 0, 8.9795599e-05,
	-1.6800218e-05, 0, -1.8050339e-05,
	-6.5792697e-05, 0, -4.763939e-05,
	-7.2378626e-05, 0, -6.4452323e-05,
	-7.109313e-05, 0, -5.7533132e-05,
	-6.3867228e-05, 0, -5.0695443e-05,
	-7.11054e-05, 0, -5.7430287e-05,
	-7.2415687e-05, 0, -6.4509622e-05,
	-6.5891551e-05, 0, -4.7770532e-05,
	-5.6961988e-06, 0, -5.6267526e-07,
	-1.3933349e-06, 0, -8.2294278e-07,
	-1.3917123e-05, 0, -1.2633e-05,
	-3.875129e-05, 0, -3.3689407e-05,
	-5.7104356e-05, 0, -4.8486038e-05,
	-5.7059143e-05, 0, -4.8447914e-05,
	-3.8753543e-05, 0, -3.3686668e-05,
	-1.4027133e-05, 0, -1.2731411e-05,
	-1.4618061e-06, 0, -8.7396631e-07,*/
}};


int main()
{
	Skx<t_real, t_cplx, ORDER> skx;
	skx.SetDebug(1);

	// set initial fourier components
	{
		std::vector<ublas::vector<t_cplx>> fourier;
		fourier.reserve(_allcomps.size()/3);

		for(std::size_t comp=0; comp<_allcomps.size(); comp+=3)
		{
			fourier.push_back(tl2::make_vec<ublas::vector<t_cplx>>(
			{
				_allcomps[comp],
				_allcomps[comp+1],
				_allcomps[comp+2]
			}));
		}

		skx.SetFourier(fourier);
	}

	skx.SetT(-1000.);
	skx.SetB(25.);

	std::cout << "Bc2 = " << get_bc2<t_real>(-1000.) << std::endl;

	std::cout.precision(8);
	std::cout << "Order: " << ORDER << std::endl;
	std::cout << "F_start = " << skx.F() << std::endl;
	bool ok = skx.minimise(ORDER, 0,1,0, 1,1,1);
	std::cout << "F_min = " << skx.F() << " (ok: " << std::boolalpha << ok << ")" << std::endl;

	std::cout << "\nFourier components:\n";
	for(const auto& fourier : skx.GetFourier())
	{
		std::cout << fourier[0].real() << ", " << fourier[1].real() << ", " << fourier[2].real() << ", ";
		std::cout << std::endl;
	}

	return 0;
}
