/**
 * default helimagnetic ground state
 * @author tweber@ill.fr
 * @date apr-22
 * @license GPLv2 (see 'LICENSE' file)
 */


/**
 * temperature and field (both in theoretical units),
 * for which the ground state has been calculated
 */
static const t_real _heligs_T = -1000.;
static const t_real _heligs_B = 22.5;


/**
 * output from heli_gs.cpp
 */
static const std::vector<std::complex<t_real>> _heligs_allcomps =
{{
	// T_theo = -1000, B_theo = Bc2/2
	{ 0, 0 }, { 0, -0 }, { 10.105999, 0 }, // 0
	{ 7.0516886, 7.0527535 }, { 7.0516886, -7.0527535 }, { -0.0043532911, 0 }, // 1
	{ 0.0017275317, 0.0013557652 }, { 0.0017275317, -0.0013557652 }, { 0.0013592039, 0 }, // 2
	{ -8.2016802e-05, 0.00013475716 }, { -8.2016802e-05, -0.00013475716 }, { -0.00043019351, 0 }, // 3
	{ -0.0002323387, 0.00016153728 }, { -0.0002323387, -0.00016153728 }, { -0.00041014984, 0 }, // 4
	{ 0.00019408446, 0.00031581927 }, { 0.00019408446, -0.00031581927 }, { -0.00017481514, 0 }, // 5
	{ 0.00019843995, 0.00031268172 }, { 0.00019843995, -0.00031268172 }, { 6.9640087e-05, 0 }, // 6
	{ -9.879939e-06, 7.8314926e-05 }, { -9.879939e-06, -7.8314926e-05 }, { 0.0002008816, 0 }, // 7
	{ -3.8679061e-05, -5.787379e-06 }, { -3.8679061e-05, 5.787379e-06 }, { -3.452191e-06, 0 }, // 8
	{ 4.4190549e-05, 3.2005704e-05 }, { 4.4190549e-05, -3.2005704e-05 }, { -1.4633525e-06, 0 }, // 9

	/*
	// T_theo = -4500, B_theo = 34.3
	{ 0, 0 }, { 0, -0 }, { 15.385833, 0 }, // 0
	{ 15.863238, 15.86433 }, { 15.863238, -15.86433 }, { 0.0059160095, 0 }, // 1
	{ -0.0010839612, -0.0017781131 }, { -0.0010839612, 0.0017781131 }, { -0.0001470672, 0 }, // 2
	{ 0.0010818543, 0.00010331363 }, { 0.0010818543, -0.00010331363 }, { -0.0011816203, 0 }, // 3
	{ 0.00013062525, -0.00026890941 }, { 0.00013062525, 0.00026890941 }, { -0.00026548663, 0 }, // 4
	{ -0.00017504471, -0.00070747921 }, { -0.00017504471, 0.00070747921 }, { -7.0819154e-05, 0 }, // 5
	{ -8.7129477e-05, -0.00022424945 }, { -8.7129477e-05, 0.00022424945 }, { 5.131185e-05, 0 }, // 6
	{ -0.00027711186, -0.00027607749 }, { -0.00027711186, 0.00027607749 }, { -0.0001380902, 0 }, // 7
	{ -4.9867759e-05, -3.4948585e-05 }, { -4.9867759e-05, 3.4948585e-05 }, { -0.00029039359, 0 }, // 8
	{ 9.2924492e-05, 7.3270034e-05 }, { 9.2924492e-05, -7.3270034e-05 }, { -4.3966514e-06, 0 }, // 9
	*/
}};


template<class t_vec_cplx>
std::tuple<
	t_real,                  // T
	t_real,                  // B
	std::vector<t_vec_cplx>  // fourier components
>
_get_heli_gs()
{
	// set initial fourier components
	std::vector<t_vec_cplx> fourier;
	fourier.reserve(_heligs_allcomps.size()/3);

	for(std::size_t comp=0; comp<_heligs_allcomps.size(); comp+=3)
	{
		fourier.emplace_back(tl2::make_vec<t_vec_cplx>(
		{
			_heligs_allcomps[comp],
			_heligs_allcomps[comp+1],
			_heligs_allcomps[comp+2]
		}));
	}

	return std::make_tuple(_heligs_T, _heligs_B, fourier);
}
