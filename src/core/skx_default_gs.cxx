/**
 * default ground state for skx
 * @author tweber@ill.fr
 * @date aug-18
 * @license GPLv2 (see 'LICENSE' file)
 */


#define __SKX_GS_VALS 2

/**
 * output from skx_gs.cpp
 * x values are the x (and y) imaginary components
 * y values are not used (same as x)
 * z values are the z real components
 */
static const std::vector<t_real> _skxgs_allcomps =
{{
#if __SKX_GS_VALS == 0
	// order 9, old
	0, 0, 10.643255,
	-5.8312418, 0, -5.4285579,
	0.11772572, 0, 0.092512566,
	-0.60875193, 0, -0.6283387,
	0.099009681, 0, 0.097708898,
	0.21345703, 0, 0.20197682,
	0.21345707, 0, 0.20197861,
	-0.014776251, 0, -0.014232656,
	-0.0046309613, 0, -0.0035734788,
	0.0081490635, 0, 0.0096266455,
	-0.0046284703, 0, -0.003570242,
	-0.00092182745, 0, -0.00095170469,
	-0.0060308055, 0, -0.0059615124,
	-0.0098962887, 0, -0.0095705205,
	-0.009896991, 0, -0.0095664551,
	-0.006029697, 0, -0.0059582546,
	0.00066330707, 0, 0.00055053732,
	0.0010092654, 0, 0.0008918821,
	0.00071552573, 0, 0.00060852518,
	0.00046383518, 0, 0.00034571667,
	0.00071574625, 0, 0.0006113456,
	0.0010099268, 0, 0.00089342825,
	5.3331775e-05, 0, -0.00010249534,
	0.00015539651, 0, 2.5296191e-06,
	0.00030612867, 0, 0.00024823487,
	0.00044277835, 0, 0.00042931965,
	0.00044175346, 0, 0.00042949054,
	0.00030547693, 0, 0.00024768997,
	0.00015489058, 0, 1.3435546e-06,
	6.9271166e-05, 0, 5.7206645e-05,
	-2.7366626e-05, 0, -2.1078224e-05,
	-3.9356e-05, 0, -5.7759202e-05,
	-3.8566738e-05, 0, -4.1978018e-05,
	-2.7839047e-05, 0, -2.8671778e-05,
	-3.9337396e-05, 0, -4.2705009e-05,
	-4.1111101e-05, 0, -5.945824e-05,
	-2.8210339e-05, 0, -2.1934814e-05,
	5.8917296e-05, 0, 3.8878991e-05,
	7.5328415e-05, 0, 5.9727815e-05,
	6.4888601e-05, 0, 3.2477254e-05,
	1.0543302e-05, 0, -5.3633989e-06,
	-1.8523783e-05, 0, -2.8534835e-05,
	-1.8660178e-05, 0, -2.8629368e-05,
	1.0359175e-05, 0, -5.4897177e-06,
	6.4840587e-05, 0, 3.245778e-05,
	7.5336564e-05, 0, 5.9731305e-05,

#elif __SKX_GS_VALS == 1
	// order 9
	0, 0, 10.64951,
	-5.8301601, 0, -5.4274406,
	0.1164418, 0, 0.091311253,
	-0.61017069, 0, -0.62964054,
	0.099076282, 0, 0.097911522,
	0.21339648, 0, 0.20193685,
	0.21339689, 0, 0.20193773,
	-0.014816753, 0, -0.014166653,
	-0.0045471355, 0, -0.0034240913,
	0.0083032796, 0, 0.0097946122,
	-0.004546333, 0, -0.0034221013,
	-0.00096184764, 0, -0.0010076914,
	-0.0060539487, 0, -0.0060208775,
	-0.0098389026, 0, -0.0096597494,
	-0.0098380481, 0, -0.0096586448,
	-0.00605346, 0, -0.0060195669,
	0.00059766329, 0, 0.00058351601,
	0.0009323498, 0, 0.00090577783,
	0.0006450583, 0, 0.0006055427,
	0.00037262862, 0, 0.00032926105,
	0.00064543815, 0, 0.00060577095,
	0.00093206896, 0, 0.00090588863,
	-6.1929345e-05, 0, -5.8088707e-05,
	7.6512742e-05, 0, 7.6901535e-05,
	0.00031721342, 0, 0.00033826027,
	0.00050597254, 0, 0.00053549924,
	0.00050588056, 0, 0.00053535217,
	0.00031667888, 0, 0.0003380739,
	7.6384585e-05, 0, 7.6782859e-05,
	-7.3024266e-06, 0, -2.2907626e-06,
	-5.2693862e-05, 0, -4.3699545e-05,
	-7.4180015e-05, 0, -7.0170981e-05,
	-7.3853197e-05, 0, -5.9363535e-05,
	-6.2321243e-05, 0, -4.7309444e-05,
	-7.3993901e-05, 0, -5.9249322e-05,
	-7.4355386e-05, 0, -7.0235541e-05,
	-5.2758932e-05, 0, -4.4043676e-05,
	3.551125e-06, 0, 5.6914116e-06,
	8.6704395e-06, 0, 6.4827949e-06,
	-8.3197814e-06, 0, -9.4812247e-06,
	-3.2100622e-05, 0, -2.92973e-05,
	-4.6197149e-05, 0, -4.0167803e-05,
	-4.6113205e-05, 0, -4.0080008e-05,
	-3.2034563e-05, 0, -2.9213783e-05,
	-8.5228697e-06, 0, -9.6466849e-06,
	8.4820229e-06, 0, 6.3066594e-06,

#elif __SKX_GS_VALS == 2
	// order 9, no hoc
	0, -0, 10.663612,
	-5.847046, 5.847046, -5.407236,
	0.11348549, -0.11348549, 0.087335309,
	-0.60664435, 0.60664435, -0.62706161,
	0.093072501, -0.093072501, 0.091462812,
	0.20331025, -0.20331025, 0.1905029,
	0.20331054, -0.20331054, 0.19050289,
	-0.01265011, 0.01265011, -0.011924111,
	-0.0035164938, 0.0035164938, -0.0023639852,
	0.0082018002, -0.0082018002, 0.0096875741,
	-0.0035165232, 0.0035165232, -0.0023639326,
	-0.00087481324, 0.00087481324, -0.00091285628,
	-0.005050952, 0.005050952, -0.0049751837,
	-0.0082436307, 0.0082436307, -0.0079855657,
	-0.0082435857, 0.0082435857, -0.0079854898,
	-0.0050507636, 0.0050507636, -0.0049750991,
	0.00037523503, -0.00037523503, 0.00040145854,
	0.00062865991, -0.00062865991, 0.00061754722,
	0.00044467214, -0.00044467214, 0.0004048573,
	0.00025350958, -0.00025350958, 0.00020829956,
	0.00044474497, -0.00044474497, 0.00040484586,
	0.00062861349, -0.00062861349, 0.00061756619,
	-7.1472901e-05, 7.1472901e-05, -1.0047099e-05,
	4.8486499e-05, -4.8486499e-05, 7.123637e-05,
	0.0002123971, -0.0002123971, 0.00023158625,
	0.00034647227, -0.00034647227, 0.00035750673,
	0.00034646731, -0.00034646731, 0.00035746966,
	0.00021238693, -0.00021238693, 0.00023160892,
	4.8518035e-05, -4.8518035e-05, 7.1340362e-05,
	-9.6859981e-06, 9.6859981e-06, -1.66664e-05,
	-3.5903167e-05, 3.5903167e-05, -2.5178535e-05,
	-4.9448774e-05, 4.9448774e-05, -3.7375692e-05,
	-4.4673667e-05, 4.4673667e-05, -3.3446092e-05,
	-3.8558908e-05, 3.8558908e-05, -2.8912801e-05,
	-4.4703806e-05, 4.4703806e-05, -3.3476637e-05,
	-4.9404505e-05, 4.9404505e-05, -3.7350365e-05,
	-3.587342e-05, 3.587342e-05, -2.5149213e-05,
	-1.9299362e-05, 1.9299362e-05, -1.1353794e-05,
	-1.921981e-05, 1.921981e-05, -1.3578188e-05,
	-1.9421166e-05, 1.9421166e-05, -1.2134935e-05,
	-2.1062548e-05, 2.1062548e-05, -1.5478968e-05,
	-2.6130461e-05, 2.6130461e-05, -1.9767701e-05,
	-2.6151904e-05, 2.6151904e-05, -1.9781336e-05,
	-2.1095461e-05, 2.1095461e-05, -1.5505212e-05,
	-1.9438456e-05, 1.9438456e-05, -1.2150978e-05,
	-1.9220777e-05, 1.9220777e-05, -1.3579722e-05,

#endif
}};


template<class t_vec_cplx>
std::vector<t_vec_cplx> _get_skx_gs()
{
	using t_cplx = typename t_vec_cplx::value_type;
	constexpr auto imag = t_cplx(0, 1);

	// set initial fourier components
	std::vector<t_vec_cplx> fourier;
	fourier.reserve(_skxgs_allcomps.size()/3);

	for(std::size_t comp=0; comp<_skxgs_allcomps.size(); comp+=3)
	{
		fourier.push_back(tl2::make_vec<t_vec_cplx>(
		{
			_skxgs_allcomps[comp] * imag,
			_skxgs_allcomps[comp+1] * imag,
			_skxgs_allcomps[comp+2]
		}));
	}

	return fourier;
}
